name: Helm Deploy

on:
  push:
    branches: [ staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment (e.g., prod)"
        required: true
        default: "staging" # ← change "prod" to "dev" if you want to deploy to dev by default

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: devops-cicd
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_github_username: ${{ secrets.TF_VAR_GITHUB_USERNAME }}
      TF_VAR_github_token: ${{ secrets.TF_VAR_GITHUB_TOKEN }}

    steps:
      # ────────── Git / AKS context ──────────
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group rg-devops-cicd-${{ env.ENVIRONMENT }} \
            --name          aks-devops-cicd-${{ env.ENVIRONMENT }} \
            --overwrite-existing
            
      # ────────── Namespace & image‑pull secret ──────────
      - name: Prepare namespace
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry ghcr \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.TF_VAR_GITHUB_USERNAME }} \
            --docker-password=${{ secrets.TF_VAR_GITHUB_TOKEN }} \
            --namespace $NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create backend secrets for database access
          kubectl create secret generic backend-secrets \
            --from-literal=DB_HOST='${{ secrets.DB_HOST }}' \
            --from-literal=DB_PORT='${{ secrets.DB_PORT }}' \
            --from-literal=DB_NAME='${{ secrets.DB_NAME }}' \
            --from-literal=DB_USER='${{ secrets.DB_USER }}' \
            --from-literal=DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
            --from-literal=DB_SSLMODE='require' \
            --namespace $NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      # ────────── Helm setup and deployments ──────────
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Install NGINX Ingress Controller
        run: |
          chmod +x ./helm/install_nginx_controller.sh
          ./helm/install_nginx_controller.sh


      - name: Deploy Backend
        run: |
          helm upgrade --install backend ./helm/backend \
            --namespace ${{ env.NAMESPACE }} \
            --set postgresql.host=${{ secrets.DB_HOST }} \
            --set postgresql.port=${{ secrets.DB_PORT }} \
            --set postgresql.database=${{ secrets.DB_NAME }} \
            --set postgresql.user=${{ secrets.DB_USER }} \
            --set postgresql.password=${{ secrets.DB_PASSWORD }} \
            --set postgresql.sslmode=require

      - name: Deploy Frontend
        run: |
          helm upgrade --install frontend ./helm/frontend \
            --namespace ${{ env.NAMESPACE }}

      - name: Deploy Ingress
        run: |
          helm upgrade --install ingress ./helm/ingress \
            --namespace ${{ env.NAMESPACE }}
#workflow1